result <- plot_standard_curve(df, "AA")
# 创建标准曲线函数
plot_standard_curve <- function(data, compound_name) {
# 计算线性回归
fit <- lm(AA ~ Conc, data = data)
# 绘制散点图
plot(data$Conc, data$AA,
xlab = "Concentration",
ylab = "Peak Area",
pch = 16,
main = paste("Standard Curve of", compound_name))
# 添加趋势线
abline(fit, col = "red")
# 获取R方和方程参数
r2 <- round(summary(fit)$r.squared, 4)
coef <- coef(fit)
# 添加方程和R方
eq <- paste0("y = ", round(coef[2], 2), "x + ", round(coef[1], 2))
r2_text <- paste0("R² = ", r2)
# 在图上添加文本
legend("topleft",
c(eq, r2_text),
bty = "n")
return(fit)
}
# 创建示例数据框
df <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494)
)
# 查看数据框
print(df)
# 使用标准曲线函数
plot_standard_curve <- function(data, compound_name) {
# 对数转换
data$logConc <- log10(data$Conc)
data$logAA <- log10(data$AA)
# 计算线性回归
fit <- lm(logAA ~ logConc, data = data)
# 绘制散点图
plot(data$logConc, data$logAA,
xlab = "log(Concentration)",
ylab = "log(Peak Area)",
pch = 16,
main = paste("Standard Curve of", compound_name))
# 添加趋势线
abline(fit, col = "red")
# 获取R方和方程参数
r2 <- round(summary(fit)$r.squared, 4)
coef <- coef(fit)
# 添加方程和R方
eq <- paste0("y = ", round(coef[2], 2), "x + ", round(coef[1], 2))
r2_text <- paste0("R² = ", r2)
# 在图上添加文本
legend("topleft",
c(eq, r2_text),
bty = "n")
return(fit)
}
# 调用函数
result <- plot_standard_curve(df, "AA")
# 创建示例数据框
df <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494)
)
# 改进的标准曲线函数
plot_standard_curve <- function(data, compound_name, log = FALSE) {
if(log) {
# 对数转换
x <- log10(data$Conc)
y <- log10(data$AA)
xlab <- "log(Concentration)"
ylab <- "log(Peak Area)"
} else {
# 不进行对数转换
x <- data$Conc
y <- data$AA
xlab <- "Concentration"
ylab <- "Peak Area"
}
# 计算线性回归
fit <- lm(y ~ x)
# 绘制散点图
plot(x, y,
xlab = xlab,
ylab = ylab,
pch = 16,
main = paste("Standard Curve of", compound_name))
# 添加趋势线
abline(fit, col = "red")
# 获取R方和方程参数
r2 <- round(summary(fit)$r.squared, 4)
coef <- coef(fit)
# 添加方程和R方
eq <- paste0("y = ", round(coef[2], 2), "x + ", round(coef[1], 2))
r2_text <- paste0("R² = ", r2)
# 在图上添加文本
legend("topleft",
c(eq, r2_text),
bty = "n")
return(fit)
}
# 调用函数示例
# 不使用对数转换
result1 <- plot_standard_curve(df, "AA", log = FALSE)
# 使用对数转换
result2 <- plot_standard_curve(df, "AA", log = TRUE)
# 创建示例数据框
df <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494),
DHA = c(58619120, 25206615, 14247479, 6586211, 3235692, 1646262, 921494),
EPA = c(48619120, 22206615, 12247479, 5586211, 2935692, 1446262, 821494)
)
# 改进的标准曲线函数
plot_standard_curves <- function(data, compounds = "all", log = FALSE) {
# 处理compounds参数
if(compounds[1] == "all") {
# 选择除Conc外的所有列
compounds <- names(data)[names(data) != "Conc"]
}
# 检查输入的物质是否存在于数据框中
if(!all(compounds %in% names(data))) {
stop("Some compounds not found in data")
}
# 计算需要的图片布局
n_compounds <- length(compounds)
# 调整图片尺寸：每增加一个物质，宽度增加5英寸
width <- 5 * n_compounds
# 打开PNG设备
png("standard_curves.png", width = width, height = 4, units = "in", res = 300)
# 设置图片布局
par(mfrow = c(1, n_compounds), mar = c(4, 4, 3, 1))
# 存储结果
results <- list()
# 循环处理选定的物质
for(compound in compounds) {
y_data <- data[[compound]]
if(log) {
x <- log10(data$Conc)
y <- log10(y_data)
xlab <- "log(Concentration)"
ylab <- paste("log(Peak Area)")
} else {
x <- data$Conc
y <- y_data
xlab <- "Concentration"
ylab <- paste("Peak Area")
}
# 计算线性回归
fit <- lm(y ~ x)
results[[compound]] <- fit
# 绘制散点图
plot(x, y,
xlab = xlab,
ylab = ylab,
pch = 16,
main = paste("Standard Curve of", compound))
# 添加趋势线
abline(fit, col = "red")
# 获取R方和方程参数
r2 <- round(summary(fit)$r.squared, 4)
coef <- coef(fit)
# 添加方程和R方
eq <- paste0("y = ", round(coef[2], 2), "x + ", round(coef[1], 2))
r2_text <- paste0("R² = ", r2)
# 在图上添加文本
legend("topleft",
c(eq, r2_text),
bty = "n")
}
# 关闭PNG设备
dev.off()
return(results)
}
setwd("D:/Desktop")
# 分析单个物质
results_AA <- plot_standard_curves(df, compounds = "AA", log = TRUE)
# 创建示例数据框
df <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494),
DHA = c(58619120, 25206615, 14247479, 6586211, 3235692, 1646262, 921494),
EPA = c(48619120, 22206615, 12247479, 5586211, 2935692, 1446262, 821494)
)
# 改进的标准曲线函数
plot_standard_curves <- function(data, compounds = "all", log = FALSE) {
# 处理compounds参数
if(compounds[1] == "all") {
compounds <- names(data)[names(data) != "Conc"]
}
# 检查输入的物质是否存在于数据框中
if(!all(compounds %in% names(data))) {
stop("Some compounds not found in data")
}
# 创建文件名
filename <- paste0("standard_curves_", paste(compounds, collapse = "_"), ".png")
# 计算需要的图片布局
n_compounds <- length(compounds)
# 调整图片尺寸：每增加一个物质，宽度增加5英寸
width <- 5 * n_compounds
# 打开PNG设备
png(filename, width = width, height = 4, units = "in", res = 300)
# 设置图片布局
par(mfrow = c(1, n_compounds), mar = c(4, 4, 3, 1))
# 存储结果
results <- list()
# 循环处理选定的物质
for(compound in compounds) {
y_data <- data[[compound]]
if(log) {
x <- log10(data$Conc)
y <- log10(y_data)
xlab <- "log(Concentration)"
ylab <- paste("log(Peak Area)")
} else {
x <- data$Conc
y <- y_data
xlab <- "Concentration"
ylab <- paste("Peak Area")
}
# 计算线性回归
fit <- lm(y ~ x)
results[[compound]] <- fit
# 绘制散点图
plot(x, y,
xlab = xlab,
ylab = ylab,
pch = 16,
main = paste("Standard Curve of", compound))
# 添加趋势线
abline(fit, col = "red")
# 获取R方和方程参数
r2 <- round(summary(fit)$r.squared, 4)
coef <- coef(fit)
# 添加方程和R方
eq <- paste0("y = ", round(coef[2], 2), "x + ", round(coef[1], 2))
r2_text <- paste0("R² = ", r2)
# 在图上添加文本
legend("topleft",
c(eq, r2_text),
bty = "n")
}
# 关闭PNG设备
dev.off()
# 打印保存的文件名
message("Plot saved as: ", filename)
return(results)
}
# 分析单个物质（将保存为 standard_curves_AA.png）
results_AA <- plot_standard_curves(df, compounds = "AA", log = TRUE)
# 分析单个物质（将保存为 standard_curves_AA.png）
results_AA <- plot_standard_curves(df, compounds = "AA", log = F)
# 分析两个物质（将保存为 standard_curves_AA_DHA.png）
results_two <- plot_standard_curves(df, compounds = c("AA", "DHA"), log = TRUE)
# 分析所有物质（将保存为 standard_curves_AA_DHA_EPA.png）
results_all <- plot_standard_curves(df, compounds = "all", log = TRUE)
# 创建示例数据框
df <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494),
DHA = c(58619120, 25206615, 14247479, 6586211, 3235692, 1646262, 921494),
EPA = c(48619120, 22206615, 12247479, 5586211, 2935692, 1446262, 821494)
)
# 改进的标准曲线函数
plot_standard_curves <- function(data, compounds = "all", log = FALSE, split = FALSE) {
# 处理compounds参数
if(compounds[1] == "all") {
compounds <- names(data)[names(data) != "Conc"]
}
# 检查输入的物质是否存在于数据框中
if(!all(compounds %in% names(data))) {
stop("Some compounds not found in data")
}
# 存储结果
results <- list()
if(split) {
# 分开保存每个物质的图片
for(compound in compounds) {
# 创建单个文件名
filename <- paste0("Standard Curve of ", compound, ".png")
# 打开PNG设备
png(filename, width = 5, height = 4, units = "in", res = 300)
# 设置绘图参数
par(mar = c(4, 4, 3, 1))
y_data <- data[[compound]]
if(log) {
x <- log10(data$Conc)
y <- log10(y_data)
xlab <- "log(Concentration)"
ylab <- paste("log(Peak Area)")
} else {
x <- data$Conc
y <- y_data
xlab <- "Concentration"
ylab <- paste("Peak Area")
}
# 计算线性回归
fit <- lm(y ~ x)
results[[compound]] <- fit
# 绘制散点图
plot(x, y,
xlab = xlab,
ylab = ylab,
pch = 16,
main = paste("Standard Curve of", compound))
# 添加趋势线
abline(fit, col = "red")
# 获取R方和方程参数
r2 <- round(summary(fit)$r.squared, 4)
coef <- coef(fit)
# 添加方程和R方
eq <- paste0("y = ", round(coef[2], 2), "x + ", round(coef[1], 2))
r2_text <- paste0("R² = ", r2)
# 在图上添加文本
legend("topleft",
c(eq, r2_text),
bty = "n")
# 关闭PNG设备
dev.off()
message("Plot saved as: ", filename)
}
} else {
# 合并保存所有物质的图片
n_compounds <- length(compounds)
n_rows <- ceiling(n_compounds/4)
n_cols <- min(4, n_compounds)
# 创建合并文件名
filename <- "Standard Curve of compounds.png"
# 计算适当的图片尺寸
width <- 5 * n_cols
height <- 4 * n_rows
# 打开PNG设备
png(filename, width = width, height = height, units = "in", res = 300)
# 设置图片布局
par(mfrow = c(n_rows, n_cols), mar = c(4, 4, 3, 1))
for(compound in compounds) {
y_data <- data[[compound]]
if(log) {
x <- log10(data$Conc)
y <- log10(y_data)
xlab <- "log(Concentration)"
ylab <- paste("log(Peak Area)")
} else {
x <- data$Conc
y <- y_data
xlab <- "Concentration"
ylab <- paste("Peak Area")
}
# 计算线性回归
fit <- lm(y ~ x)
results[[compound]] <- fit
# 绘制散点图
plot(x, y,
xlab = xlab,
ylab = ylab,
pch = 16,
main = paste("Standard Curve of", compound))
# 添加趋势线
abline(fit, col = "red")
# 获取R方和方程参数
r2 <- round(summary(fit)$r.squared, 4)
coef <- coef(fit)
# 添加方程和R方
eq <- paste0("y = ", round(coef[2], 2), "x + ", round(coef[1], 2))
r2_text <- paste0("R² = ", r2)
# 在图上添加文本
legend("topleft",
c(eq, r2_text),
bty = "n")
}
# 关闭PNG设备
dev.off()
message("Plot saved as: ", filename)
}
return(results)
}
# 分开保存每个物质的图片
results_split <- plot_standard_curves(df, compounds = "all", log = TRUE, split = TRUE)
# 合并保存所有物质的图片
results_combined <- plot_standard_curves(df, compounds = "all", log = TRUE, split = FALSE)
# 分开保存每个物质的图片
results_split <- plot_standard_curves(df, compounds = "all", log = F, split = TRUE)
results_split <- plot_standard_curves(df, compounds = c("AA","DHA"), log = F, split = TRUE)
results_split <- plot_standard_curves(df, compounds = c("AA","DHA"), log = F, split = F)
df <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494),
DHA = c(58619120, 25206615, 14247479, 6586211, 3235692, 1646262, 921494),
EPA = c(48619120, 22206615, 12247479, 5586211, 2935692, 1446262, 821494),
ALA = c(38619120, 19206615, 10247479, 4586211, 2535692, 1246262, 721494),  # 新增
LA = c(28619120, 16206615, 8247479, 3586211, 2135692, 1046262, 621494),    # 新增
GLA = c(18619120, 13206615, 6247479, 2586211, 1735692, 846262, 521494)     # 新增
)
# 分开保存每个物质的图片
results_split <- plot_standard_curves(df, compounds = "all", log = F, split = TRUE)
results_split <- plot_standard_curves(df, compounds = c("GLA","LA"), log = F, split = F)
results_split <- plot_standard_curves(df, compounds = c("GLA","LA"), log = F, split = T)
# 合并保存所有物质的图片
results_combined <- plot_standard_curves(df, compounds = "all", log = TRUE, split = FALSE)
# 合并保存所有物质的图片
results_combined <- plot_standard_curves(df, compounds = "all", log = F, split = FALSE)
library(MStools)
detach("package:MStools", unload = TRUE)
remove.packages("MStools")
devtools::install_github("hswl1314/MStools")
devtools::install_github("hswl1314/MStools")
library(MStools)
example_data <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494),
DHA = c(58619120, 25206615, 14247479, 6586211, 3235692, 1646262, 921494),
EPA = c(48619120, 22206615, 12247479, 5586211, 2935692, 1446262, 821494),
ALA = c(38619120, 19206615, 10247479, 4586211, 2535692, 1246262, 721494),
LA = c(28619120, 16206615, 8247479, 3586211, 2135692, 1046262, 621494),
GLA = c(18619120, 13206615, 6247479, 2586211, 1735692, 846262, 521494)
)
# Plot standard curves for LC-MS compounds
plot_standard_curves(example_data, compounds = c("AA", "DHA"), log = TRUE, split = FALSE)
# Plot standard curves for LC-MS compounds
plot_standard_curves(example_data, compounds = c("AA", "DHA"), log = TRUE, split = T)
# Plot standard curves for LC-MS compounds
plot_standard_curves(example_data, compounds = c("AA", "DHA"), log = F, split = T)
# Plot standard curves for LC-MS compounds
plot_standard_curves(example_data, compounds = c("AA", "DHA"), log = F, split = F)
# Plot standard curves for LC-MS compounds
plot_standard_curves(example_data, compounds = "all", log = F, split = F)
# Plot standard curves for LC-MS compounds
plot_standard_curves(example_data, compounds = "all", log = F, split = T)
detach("package:MStools", unload = TRUE)
example_data <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494),
DHA = c(58619120, 25206615, 14247479, 6586211, 3235692, 1646262, 921494),
EPA = c(48619120, 22206615, 12247479, 5586211, 2935692, 1446262, 821494),
ALA = c(38619120, 19206615, 10247479, 4586211, 2535692, 1246262, 721494),
LA = c(28619120, 16206615, 8247479, 3586211, 2135692, 1046262, 621494),
GLA = c(18619120, 13206615, 6247479, 2586211, 1735692, 846262, 521494)
)
setwd("D:/Desktop")
write.csv(example_data,"example_data.csv",row.names = F)
df<-read.csv("example_data.csv")
View(df)
library(MStools)
plot_standard_curves(df, compounds = "all", log = F, split = FALSE)
library(MStools)
df<-read.csv("example_data.csv")
plot_standard_curves(df, compounds = "all", log = F, split = FALSE)
df<-read.csv("example_data.csv")
plot_standard_curves(df, compounds = "all", log = F, split = FALSE)
plot_standard_curves(df, compounds = "all", log = F, split = T)
df <- data.frame(
Time = c(0.000, 0.500, 7.500, 8.000, 9.000, 9.100, 12.000),
Flow = c(0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50),
B = c(95.0, 95.0, 65.0, 40.0, 40.0, 95.0, 95.0)
)
result <- calculate_gradient_volume(df, sample_number = 10)
result <- calculate_gradient_volume(df, sample_number = 500,extra_volume = 1)
result
result <- calculate_gradient_volume(df, sample_number = 600,extra_volume = 1)
result
df <- data.frame(
Time = c(0.000, 0.500, 7.500, 8.000, 9.000, 9.100, 13.000),
Flow = c(0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50),
B = c(95.0, 95.0, 65.0, 40.0, 40.0, 95.0, 95.0)
)
result <- calculate_gradient_volume(df, sample_number = 600,extra_volume = 1)
result
df <- data.frame(
Time = c(0.000, 0.500, 7.500, 8.000, 9.000, 9.100, 13.000),
Flow = c(0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50),
B = c(95.0, 95.0, 65.0, 40.0, 40.0, 95.0, 95.0)
)
write.csv(df,"example_data.csv")
example_data <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494),
DHA = c(58619120, 25206615, 14247479, 6586211, 3235692, 1646262, 921494),
EPA = c(48619120, 22206615, 12247479, 5586211, 2935692, 1446262, 821494),
ALA = c(38619120, 19206615, 10247479, 4586211, 2535692, 1246262, 721494),
LA = c(28619120, 16206615, 8247479, 3586211, 2135692, 1046262, 621494),
GLA = c(18619120, 13206615, 6247479, 2586211, 1735692, 846262, 521494)
)
write.csv(example_data,"example_data.csv")
df<-read.csv("example_data.csv")
View(df)
write.csv(example_data,"example_data.csv",row.names = F)
write.csv(example_data,"example_data.csv",row.names = F)
example_data <- data.frame(
Conc = c(5, 2.5, 1.25, 0.625, 0.3125, 0.15625, 0.078125),
AA = c(68619120, 29206615, 16247479, 7586211, 4235692, 1846262, 1121494),
DHA = c(58619120, 25206615, 14247479, 6586211, 3235692, 1646262, 921494),
EPA = c(48619120, 22206615, 12247479, 5586211, 2935692, 1446262, 821494),
ALA = c(38619120, 19206615, 10247479, 4586211, 2535692, 1246262, 721494),
LA = c(28619120, 16206615, 8247479, 3586211, 2135692, 1046262, 621494),
GLA = c(18619120, 13206615, 6247479, 2586211, 1735692, 846262, 521494)
)
write.csv(example_data,"example_data.csv",row.names = F)
df<-read.csv("example_data.csv")
plot_standard_curves(df, compounds = "all", log = F, split = F)
plot_standard_curves(df, compounds = "all", log = F, split = T)
df <- data.frame(
Time = c(0.000, 0.500, 7.500, 8.000, 9.000, 9.100, 13.000),
Flow = c(0.50, 0.50, 0.50, 0.50, 0.50, 0.50, 0.50),
B = c(95.0, 95.0, 65.0, 40.0, 40.0, 95.0, 95.0)
)
View(df)
result <- calculate_gradient_volume(df, sample_number = 600,extra_volume = 1)
result
result <- calculate_gradient_volume(df, sample_number = 600,extra_volume = 1.3)
result
